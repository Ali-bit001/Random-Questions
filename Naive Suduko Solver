#include <iostream>
bool is_small_square_valid(int board[9][9], int x, int y);
bool is_row_valid(int board[9][9],int i);
bool solve_suduko(int board[9][9],int empty_squares);
bool is_column_valid(int board[9][9],int i);
int main() {
    
    int board[9][9] = {
    {0, 0, 0, 6, 7, 8, 9, 1, 2},  // empties at (0,0),(0,1),(0,2)
    {6, 7, 2, 0, 9, 0, 3, 4, 8},  // empties at (1,3),(1,5)
    {1, 9, 8, 3, 0, 2, 5, 0, 7},  // empties at (2,4),(2,7)
    {0, 5, 9, 7, 6, 1, 4, 2, 0},  // empties at (3,0),(3,8)
    {4, 0, 0, 8, 5, 3, 0, 9, 1},  // empties at (4,1),(4,2),(4,6)
    {7, 1, 3, 9, 2, 4, 8, 0, 0},  // empties at (5,7),(5,8)
    {9, 0, 1, 0, 3, 7, 2, 8, 4},  // empties at (6,1),(6,3)
    {0, 8, 7, 4, 0, 9, 6, 3, 5},  // empties at (7,0),(7,4)
    {3, 4, 5, 2, 8, 0, 1, 7, 0}   // empties at (8,5),(8,8)
};

    // Count empty squares
    int empty = 0;
    for (int i = 0; i < 9; ++i)
        for (int j = 0; j < 9; ++j)
            if (board[i][j] == 0)
                ++empty;
    std::cout << empty << std::endl; 
    if (!solve_suduko(board, empty)) {
        std::cout << "No solution found.\n";
    }

    return 0;
}
bool solve_suduko(int board[9][9],int empty_squares){
    if (empty_squares == 0){
        for (int i = 0;i < 9;++i){
            for (int j = 0;j < 9;++j){
                std::cout << board[i][j] << ' ';
            }
            std::cout << '\n';
        }
        return true;
    }
    else{
        for (int i = 0;i < 9;++i){
            for (int j = 0;j < 9;++j){
                if (board[i][j] == 0){
                    for (int k = 1; k <= 9;++k){
                        board[i][j] = k;
                        if(is_row_valid(board,i) && is_column_valid(board,j) && is_small_square_valid(board,i,j)){
                            if (solve_suduko(board,empty_squares - 1)){
                                return true;
                            }
                        }
                        board[i][j] = 0;
                    }
                }
            }
        }
        return false;
    }
}
bool is_row_valid(int board[9][9],int i){
    for (int j = 0;j < 9;++j){
        int element = board[i][j];
        if(element == 0) continue;
        for (int k = 0;k < 9;++k){
            if (board[i][k] == element && k != j)
                return false;
        }
    }
    return true;
}
bool is_column_valid(int board[9][9],int i){
    for (int j = 0;j < 9;++j){
        int element = board[j][i];
        if(element == 0) continue;
        for (int k = 0;k < 9;++k){
            if (board[k][i] == element && k != j)
                return false;
        }
    }
    return true;
}
bool is_small_square_valid(int board[9][9], int x, int y){
    int row_start = -1;
    if (x >= 0 && x <= 2){
        row_start = 0;
    }
    else if (x >= 3 && x <= 5){
        row_start = 3;
    }
    else{
        row_start = 6;
    }
    int row_end = row_start + 2;
    
    int col_start = -1;
    if (y >= 0 && y <= 2){
        col_start = 0;
    }
    else if (y >= 3 && y <= 5){
        col_start = 3;
    }
    else{
        col_start = 6;
    }
    int col_end = col_start + 2;
    
    
    int element = board[x][y];
    for (int k = row_start;k <= row_end;++k){
        for (int l = col_start;l <= col_end;++l){
            if (k == x && l == y)
                continue;
            if (board[k][l] == element)
                return false;
        }
    }
       
    return true;
}
