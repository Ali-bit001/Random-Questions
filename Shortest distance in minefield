#include <iostream>
#include <climits>
void preprocess_board(int** board, int rows, int columns);
int find_length_of_shortest_path(int** board, int rows, int columns, int y, int x,int current_length);
using namespace std;
int main() {
    const int rows = 5, columns = 5;
    int input[5][5] = {
    {1, 1, 1, 1, 1},
    {1, 1, 0, 1, 1},
    {1, 1, 1, 1, 1},  // obstacle at (2,2)
    {1, 1, 1, 1, 1},
    {1, 1, 1, 1, 1}
};

    // allocate and copy into dynamic board
    int** board = new int*[rows];
    for (int i = 0; i < rows; ++i) {
        board[i] = new int[columns];
        for (int j = 0; j < columns; ++j) {
            board[i][j] = input[i][j];
        }
    }

    // mark adjacency–to–0 cells as unsafe
    preprocess_board(board, rows, columns);

    int best = INT_MAX;
    // try every row in the first column
    for (int start_row = 0; start_row < rows; ++start_row) {
        if (board[start_row][0] == 1) {
            int length = find_length_of_shortest_path(
                board, rows, columns,
                /* y = */ 0,
                /* x = */ start_row,
                /* current_length = */ 1
            );
            best = min(best, length);
        }
    }

    if (best == 100000)
        cout << "No path found." << endl;
    else
        cout << "Shortest path length: " << best << endl;

    // cleanup
    for (int i = 0; i < rows; ++i) delete[] board[i];
    delete[] board;
    return 0;
}
void preprocess_board(int** board, int rows, int columns){
    for (int i = 0;i < rows;++i){
        for (int j = 0;j < columns;++j){
            if (board[i][j] == 0){
                if (i - 1>= 0){
                    board[i - 1][j] = 2;
                }
                if (i + 1 < rows){
                    board[i + 1][j] = 2;
                }
                if (j - 1>=0){
                    board[i][j - 1] = 2;
                }
                if (j + 1 < columns){
                    board[i][j + 1] = 2;
                }
            }
        }
    }
}
int find_length_of_shortest_path(int** board, int rows, int columns, int y, int x,int current_length){
    if (y == columns - 1){
        return current_length;
    }
    else if((x + 1 < rows && board[x + 1][y] == 0) && (x - 1 >= 0 && board[x - 1][y] == 0) && (y + 1 < columns && board[x][y + 1] == 0)){
        return 100000;
    }
    else{
        int l1 = 100000;
        int l2 = 100000;
        int l3 = 100000;
        int shortest = 100000;
        if (y + 1 < columns && board[x][y + 1] == 1){
            board[x][y + 1] = 3;
            l1 = find_length_of_shortest_path(board,rows,columns,y + 1,x,current_length + 1);
            board[x][y + 1] = 1;
        }
        if(x + 1 < rows && board[x + 1][y] == 1){
            board[x + 1][y] = 3;
            l2 = find_length_of_shortest_path(board,rows,columns,y,x + 1,current_length + 1);
            board[x + 1][y] = 1;
        }
        if(x - 1 >= 0 && board[x - 1][y] == 1){
            board[x - 1][y] = 3;
            l3 = find_length_of_shortest_path(board,rows,columns,y,x - 1,current_length + 1);
            board[x - 1][y] = 1;
        }
        if (l1 < shortest && l1 <= l2 && l1 <= l3){
           
            return l1;
        }
        else if (l2 < shortest && l2 <= l1 && l2 <= l3){
            
            return l2;
        }
        else{
            return l3;
        }
    }
}
